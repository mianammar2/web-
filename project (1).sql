 CREATE TABLE  "GAME" 
   (    "PLATFORM" VARCHAR2(20) NOT NULL ENABLE, 
    "CATALOGUENO" VARCHAR2(20), 
    "TITLE" VARCHAR2(255) NOT NULL ENABLE, 
    "NUMBEROFDISCS" NUMBER(*,0), 
    "SYNOPSIS" NUMBER(*,0), 
    "CATEGORY" VARCHAR2(50), 
    "GENRE" VARCHAR2(50), 
    "AGERATING" NUMBER(*,0), 
    "RELEASEDATE" DATE, 
     PRIMARY KEY ("CATALOGUENO") ENABLE
   )  ;CREATE TABLE  "MEMBER" 
   (    "MEMBERID" NUMBER(*,0), 
    "FIRSTNAME" VARCHAR2(50) NOT NULL ENABLE, 
    "LASTNAME" VARCHAR2(50) NOT NULL ENABLE, 
    "ADDRESS" VARCHAR2(255) NOT NULL ENABLE, 
    "PHONENUMBER" VARCHAR2(20), 
    "EMAIL" VARCHAR2(50), 
    "DATEOFBIRTH" DATE, 
    "MAXCONCURRENTRENTALS" NUMBER(*,0) DEFAULT 3, 
    "MEMBERSHIPSTATUS" VARCHAR2(20) DEFAULT 'Active', 
     PRIMARY KEY ("MEMBERID") ENABLE
   ) ;CREATE TABLE  "RENTAL" 
   (    "RENTALID" NUMBER(1,20) NOT NULL ENABLE, 
    "STOCKID" NUMBER(1,20) NOT NULL ENABLE, 
    "MEMBERID" NUMBER(1,20) NOT NULL ENABLE, 
    "ISSUEDATE" DATE NOT NULL ENABLE, 
    "DUEDATE" DATE NOT NULL ENABLE, 
    "RETURNDATE" DATE NOT NULL ENABLE, 
    "OVERDUE" BINARY_DOUBLE NOT NULL ENABLE, 
    "TOTALCHARGES" FLOAT(10) NOT NULL ENABLE, 
     CONSTRAINT "RENTAL_PK" PRIMARY KEY ("RENTALID", "MEMBERID") ENABLE, 
     CONSTRAINT "RENTAL_UK1" UNIQUE ("STOCKID", "MEMBERID") ENABLE
   ) ;CREATE TABLE  "STOCKITEM" 
   (    "STOCKID" NUMBER(*,0), 
    "CATALOGUENO" VARCHAR2(20) NOT NULL ENABLE, 
    "SUPPLIERID" NUMBER(*,0), 
    "ACQUISITIONDATE" DATE, 
    "COST" NUMBER(10,2), 
    "AVAILABLEQUANTITY" NUMBER(*,0) DEFAULT 1, 
     PRIMARY KEY ("STOCKID") ENABLE
   ) ;CREATE TABLE  "RESERVATION" 
   (    "RESERVATIONID" NUMBER(*,0), 
    "STOCKID" NUMBER(*,0) NOT NULL ENABLE, 
    "MEMBERID" NUMBER(*,0) NOT NULL ENABLE, 
    "REQUESTDATE" DATE NOT NULL ENABLE, 
    "RESERVATIONSTATUS" VARCHAR2(20) DEFAULT 'Active', 
     PRIMARY KEY ("RESERVATIONID") ENABLE
   ) ;
      REFERENCES  "MEMBER" ("MEMBERID") ON DELETE SET NULL ENABLE;ALTER TABLE  "EMP" ADD FOREIGN KEY ("MGR")
      REFERENCES  "DEPT" ("DEPTNO") ENABLE;ALTER TABLE  "STOCKITEM" ADD FOREIGN KEY ("CATALOGUENO")
      REFERENCES  "GAME" ("CATALOGUENO") ENABLE;ALTER TABLE  "RESERVATION" ADD FOREIGN KEY ("STOCKID")
      REFERENCES  "STOCKITEM" ("STOCKID") ENABLE;ALTER TABLE  "RESERVATION" ADD FOREIGN KEY ("MEMBERID")
      REFERENCES  "MEMBER" ("MEMBERID") ENABLE;CREATE OR REPLACE FUNCTION  "CUSTOM_HASH" (p_username in varchar2, p_password in varchar2)
return varchar2

SELECT *
FROM GAME
WHERE PLATFORM = 'WII';

SELECT g.*
FROM GAME g
LEFT JOIN STOCKITEM s ON g.CATALOGUENO = s.CATALOGUENO
LEFT JOIN RENTAL r ON s.STOCKID = r.STOCKID
GROUP BY g.CATALOGUENO
HAVING MAX(r.ISSUEDATE) < SYSDATE - INTERVAL '1' YEAR OR MAX(r.ISSUEDATE) IS NULL;

SELECT g.TITLE, COUNT(*) AS "Number of Copies"
FROM GAME g
JOIN STOCKITEM s ON g.CATALOGUENO = s.CATALOGUENO
WHERE g.TITLE = 'YourGameTitle'
GROUP BY g.TITLE;

SELECT GENRE, TITLE
FROM GAME
ORDER BY GENRE, TITLE;

SELECT m.*
FROM MEMBER m
JOIN RENTAL r ON m.MEMBERID = r.MEMBERID
WHERE r.RETURNDATE > r.DUEDATE;

SELECT m.*
FROM MEMBER m
JOIN RENTAL r ON m.MEMBERID = r.MEMBERID
GROUP BY m.MEMBERID
HAVING COUNT(*) > 3 AND MAX(r.ISSUEDATE) > SYSDATE - INTERVAL '1' YEAR;

-- Assuming there's a column in STOCKITEM table to flag obsoleted games, let's say it's named 'OBSOLETE_FLAG'
SELECT g.*
FROM GAME g
JOIN STOCKITEM s ON g.CATALOGUENO = s.CATALOGUENO
WHERE s.OBSOLETE_FLAG = 1;

SELECT TO_CHAR(ISSUEDATE, 'MM-YYYY') AS "Month-Year", COUNT(*) AS "Number of Rentals"
FROM RENTAL
GROUP BY TO_CHAR(ISSUEDATE, 'MM-YYYY')
ORDER BY COUNT(*) DESC;
-- For the least active month, just change ORDER BY to ASC.

SELECT g.TITLE, COUNT(r.RENTALID) AS "Number of Rentals"
FROM GAME g
JOIN STOCKITEM s ON g.CATALOGUENO = s.CATALOGUENO
LEFT JOIN RENTAL r ON s.STOCKID = r.STOCKID
GROUP BY g.TITLE
ORDER BY COUNT(r.RENTALID) DESC;

SELECT *
FROM (
    SELECT m.MEMBERID, r.*
    FROM MEMBER m
    JOIN RENTAL r ON m.MEMBERID = r.MEMBERID
    WHERE r.ISSUEDATE > SYSDATE - INTERVAL '1' YEAR
    GROUP BY m.MEMBERID
    HAVING COUNT(*) > 5
    UNION ALL
    SELECT m.MEMBERID, rv.*
    FROM MEMBER m
    JOIN RESERVATION rv ON m.MEMBERID = rv.MEMBERID
    WHERE rv.REQUESTDATE > SYSDATE - INTERVAL '1' YEAR
    GROUP BY m.MEMBERID
    HAVING COUNT(*) > 5
) AS AllRentalsAndReservations;

