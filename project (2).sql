 CREATE TABLE  "GAME" 
   (    "PLATFORM" VARCHAR2(20) NOT NULL ENABLE, 
    "CATALOGUENO" VARCHAR2(20), 
    "TITLE" VARCHAR2(255) NOT NULL ENABLE, 
    "NUMBEROFDISCS" NUMBER(*,0), 
    "SYNOPSIS" NUMBER(*,0), 
    "CATEGORY" VARCHAR2(50), 
    "GENRE" VARCHAR2(50), 
    "AGERATING" NUMBER(*,0), 
    "RELEASEDATE" DATE, 
     PRIMARY KEY ("CATALOGUENO") ENABLE
   )  ;CREATE TABLE  "MEMBER" 
   (    "MEMBERID" NUMBER(*,0), 
    "FIRSTNAME" VARCHAR2(50) NOT NULL ENABLE, 
    "LASTNAME" VARCHAR2(50) NOT NULL ENABLE, 
    "ADDRESS" VARCHAR2(255) NOT NULL ENABLE, 
    "PHONENUMBER" VARCHAR2(20), 
    "EMAIL" VARCHAR2(50), 
    "DATEOFBIRTH" DATE, 
    "MAXCONCURRENTRENTALS" NUMBER(*,0) DEFAULT 3, 
    "MEMBERSHIPSTATUS" VARCHAR2(20) DEFAULT 'Active', 
     PRIMARY KEY ("MEMBERID") ENABLE
   ) ;CREATE TABLE  "RENTAL" 
   (    "RENTALID" NUMBER(1,20) NOT NULL ENABLE, 
    "STOCKID" NUMBER(1,20) NOT NULL ENABLE, 
    "MEMBERID" NUMBER(1,20) NOT NULL ENABLE, 
    "ISSUEDATE" DATE NOT NULL ENABLE, 
    "DUEDATE" DATE NOT NULL ENABLE, 
    "RETURNDATE" DATE NOT NULL ENABLE, 
    "OVERDUE" BINARY_DOUBLE NOT NULL ENABLE, 
    "TOTALCHARGES" FLOAT(10) NOT NULL ENABLE, 
     CONSTRAINT "RENTAL_PK" PRIMARY KEY ("RENTALID", "MEMBERID") ENABLE, 
     CONSTRAINT "RENTAL_UK1" UNIQUE ("STOCKID", "MEMBERID") ENABLE
   ) ;CREATE TABLE  "STOCKITEM" 
   (    "STOCKID" NUMBER(*,0), 
    "CATALOGUENO" VARCHAR2(20) NOT NULL ENABLE, 
    "SUPPLIERID" NUMBER(*,0), 
    "ACQUISITIONDATE" DATE, 
    "COST" NUMBER(10,2), 
    "AVAILABLEQUANTITY" NUMBER(*,0) DEFAULT 1, 
     PRIMARY KEY ("STOCKID") ENABLE
   ) ;CREATE TABLE  "RESERVATION" 
   (    "RESERVATIONID" NUMBER(*,0), 
    "STOCKID" NUMBER(*,0) NOT NULL ENABLE, 
    "MEMBERID" NUMBER(*,0) NOT NULL ENABLE, 
    "REQUESTDATE" DATE NOT NULL ENABLE, 
    "RESERVATIONSTATUS" VARCHAR2(20) DEFAULT 'Active', 
     PRIMARY KEY ("RESERVATIONID") ENABLE
   ) ;
      REFERENCES  "MEMBER" ("MEMBERID") ON DELETE SET NULL ENABLE;ALTER TABLE  "EMP" ADD FOREIGN KEY ("MGR")
      REFERENCES  "DEPT" ("DEPTNO") ENABLE;ALTER TABLE  "STOCKITEM" ADD FOREIGN KEY ("CATALOGUENO")
      REFERENCES  "GAME" ("CATALOGUENO") ENABLE;ALTER TABLE  "RESERVATION" ADD FOREIGN KEY ("STOCKID")
      REFERENCES  "STOCKITEM" ("STOCKID") ENABLE;ALTER TABLE  "RESERVATION" ADD FOREIGN KEY ("MEMBERID")
      REFERENCES  "MEMBER" ("MEMBERID") ENABLE;CREATE OR REPLACE FUNCTION  "CUSTOM_HASH" (p_username in varchar2, p_password in varchar2)
return varchar2

SELECT g.GameTitle
FROM Games g
INNER JOIN ConsoleCompatibility c ON g.GameID = c.GameID
WHERE c.ConsoleName = 'WII';
SELECT g.GameTitle
FROM Games g
WHERE g.GameID NOT IN (
 SELECT r.GameID
 FROM Rentals r
 WHERE r.ActualReturnDate IS NULL
 OR r.ActualReturnDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
);
SELECT g.GameTitle, g.Quantity
FROM Games g
WHERE g.GameTitle LIKE '%search_term%';
SELECT m.MemberID, m.Name
FROM Rentals r
INNER JOIN Members m ON r.MemberID = m.MemberID
WHERE r.ActualReturnDate > r.ExpectedReturnDate;
SELECT m.MemberID, m.Name
FROM Members m
INNER JOIN (
 SELECT MemberID, COUNT(*) AS ReviewCount
 FROM Reviews
 WHERE ReviewDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
 GROUP BY MemberID
) AS reviews ON m.MemberID = reviews.MemberID
WHERE ReviewCount > 3
INNER JOIN Rentals r ON m.MemberID = r.MemberID -- Assuming active member criteria 
based on rentals
GROUP BY m.MemberID, m.Name;
SELECT DATE_FORMAT(RentalDate, '%Y-%m') AS Month, COUNT(*) AS RentalCount
FROM Rentals
GROUP BY DATE_FORMAT(RentalDate, '%Y-%m')
ORDER BY RentalCount DESC; -- DESC for most active, ASC for least active
SELECT g.GameTitle, COUNT(*) AS RentalCount
FROM Rentals r
INNER JOIN Games g ON r.GameID = g.GameID
GROUP BY g.GameID, g.GameTitle
ORDER BY RentalCount; -- Adjust for categorizatio
SELECT r.*, res.*
FROM (
 SELECT MemberID, COUNT(*) AS RentalCount
 FROM Rentals
 WHERE RentalDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
 GROUP BY MemberID
 HAVING RentalCount > 5
) AS activeRenters
INNER JOIN Rentals r ON
